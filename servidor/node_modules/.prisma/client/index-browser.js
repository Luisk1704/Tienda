
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.CategoriaScalarFieldEnum = {
  id: 'id',
  descripcion: 'descripcion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DireccionScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  provincia: 'provincia',
  canton: 'canton',
  distrito: 'distrito',
  direccionExacta: 'direccionExacta',
  codPostal: 'codPostal',
  telef: 'telef',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EvaluacionScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  usuarioId: 'usuarioId',
  pedidoId: 'pedidoId',
  nota: 'nota',
  descripcion: 'descripcion',
  usuarioRol: 'usuarioRol',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FotoScalarFieldEnum = {
  id: 'id',
  ropaId: 'ropaId',
  foto: 'foto',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InformeScalarFieldEnum = {
  id: 'id',
  descripcion: 'descripcion',
  usuarioId: 'usuarioId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetodoPagoScalarFieldEnum = {
  id: 'id',
  idCliente: 'idCliente',
  descripcion: 'descripcion',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PedidoRopaScalarFieldEnum = {
  id: 'id',
  idRopa: 'idRopa',
  idPedido: 'idPedido',
  cantidad: 'cantidad',
  subtotal: 'subtotal',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PedidoScalarFieldEnum = {
  id: 'id',
  idPago: 'idPago',
  clienteId: 'clienteId',
  direccionId: 'direccionId',
  descuento: 'descuento',
  IV: 'IV',
  estado: 'estado',
  subtotal: 'subtotal',
  Total: 'Total',
  fecha: 'fecha',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PreguntaScalarFieldEnum = {
  id: 'id',
  descripcion: 'descripcion',
  usuarioId: 'usuarioId',
  ropaId: 'ropaId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProveedorScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RespuestaScalarFieldEnum = {
  id: 'id',
  descripcion: 'descripcion',
  usuarioId: 'usuarioId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RopaScalarFieldEnum = {
  id: 'id',
  vendedorId: 'vendedorId',
  nombre: 'nombre',
  precio: 'precio',
  estado: 'estado',
  cantidad: 'cantidad',
  proveedorId: 'proveedorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  id: 'id',
  nombre: 'nombre',
  cedula: 'cedula',
  telefono: 'telefono',
  correo: 'correo',
  contrasenna: 'contrasenna',
  estado: 'estado',
  rol: 'rol',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};
exports.Rol = {
  ADMINISTRADOR: 'ADMINISTRADOR',
  VENDEDOR: 'VENDEDOR',
  CLIENTE: 'CLIENTE'
};

exports.Prisma.ModelName = {
  Proveedor: 'Proveedor',
  Ropa: 'Ropa',
  PedidoRopa: 'PedidoRopa',
  Pedido: 'Pedido',
  Usuario: 'Usuario',
  MetodoPago: 'MetodoPago',
  Pregunta: 'Pregunta',
  Respuesta: 'Respuesta',
  Informe: 'Informe',
  Evaluacion: 'Evaluacion',
  Categoria: 'Categoria',
  Direccion: 'Direccion',
  Foto: 'Foto'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
